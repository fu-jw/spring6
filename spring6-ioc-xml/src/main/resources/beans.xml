<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--配置User Bean-->
    <bean class="com.fredo.iocxml.User" id="user"/>
    <!--根据类型获取bean时(根据ID和类型获取bean，不会报错)，相同类型只能配置一个！！！-->
<!--    <bean class="com.fredo.iocxml.User" id="user2"/>-->

    <!--一个接口实现类获取过程-->
    <!--不能直接配置该接口，而是其实现类-->
    <bean id="userDao" class="com.fredo.iocxml.bean.UserDaoImpl"/>
    <!--同一个接口不能配置两个实现类，
    否则报错：No qualifying bean of type 'com.fredo.iocxml.bean.UserDao' available:
            expected single matching bean but found 2: userDao,personDao
    -->
<!--    <bean id="personDao" class="com.fredo.iocxml.bean.PersonDaoImpl"/>-->

    <!--依赖注入-setter-->
    <bean class="com.fredo.iocxml.di.Book" id="book1">
        <!-- property标签：通过组件类的setXxx()方法给组件对象设置属性 -->
        <!-- name属性：指定属性名（这个属性名是getXxx()、setXxx()方法定义的，和成员变量无关） -->
        <!-- value属性：指定属性值 -->
        <property name="name" value="语文"/>
        <property name="author" value="老舍"/>

        <!--空值处理-->
        <property name="other1">
            <null/>
        </property>

        <!--XML实体处理
        大于号、小于号在XML文档中用来定义标签的开始，不能随便使用
        需使用XML实体来代替
        -->
        <property name="other2" value="&lt; &gt;"/>

        <!-- 使用CDATA节 -->
        <!-- CDATA中的C代表Character，是文本、字符的含义，CDATA就表示纯文本数据 -->
        <!-- XML解析器看到CDATA节就知道这里是纯文本，就不会当作XML标签或属性来解析 -->
        <!-- 所以CDATA节中写什么符号都随意 -->
        <property name="other3">
            <value><![CDATA[a < b]]></value>
        </property>
    </bean>

    <!--依赖注入-构造器-->
<!--    <bean class="com.fredo.iocxml.di.Book" id="book2">-->
<!--        <constructor-arg name="author" value="华罗庚"/>-->
<!--        <constructor-arg name="name" value="数学"/>-->
<!--    </bean>-->

    <!-- 注意：当setter注入和构造器混合使用时，setter的优先级更高，会保留setter的值 -->

    <bean id="clazz1" class="com.fredo.iocxml.di.Clazz">
        <property name="clazzId" value="1111"/>
        <property name="clazzName" value="财源滚滚班"/>
    </bean>

    <bean id="clazz3" class="com.fredo.iocxml.di.Clazz"/>

    <bean id="stu" class="com.fredo.iocxml.di.Student">
        <property name="id" value="1001"/>
        <property name="name" value="张三"/>
        <property name="age" value="26"/>
        <property name="sex" value="男"/>

        <!-- 给对象类型属性赋值 -->
        <!-- 方法一：引用外部bean，ref的值对应外部bean的id -->
        <property name="clazz1" ref="clazz1"/>

        <!-- 方法二：使用内部bean -->
        <property name="clazz2">
            <!-- 在一个bean中再声明一个bean就是内部bean -->
            <!-- 内部bean只能用于给属性赋值，不能在外部通过IOC容器获取，因此可以省略id属性 -->
            <bean id="clazzInner" class="com.fredo.iocxml.di.Clazz">
                <property name="clazzId" value="2222"/>
                <property name="clazzName" value="远大前程班"/>
            </bean>
        </property>

        <!-- 方法三：级联属性赋值 -->
        <property name="clazz3" ref="clazz3"/>
        <property name="clazz3.clazzId" value="3333"/>
        <property name="clazz3.clazzName" value="最强王者班"/>

    </bean>

    <!-- 为数组类型属性赋值 -->
    <bean id="stu2" class="com.fredo.iocxml.di.Student">
        <property name="id" value="1002"/>
        <property name="name" value="李四"/>
        <property name="age" value="26"/>
        <property name="sex" value="男"/>
        <!-- ref属性：引用IOC容器中某个bean的id，将所对应的bean为属性赋值 -->
        <property name="clazz1" ref="clazz1"/>
        <property name="hobbies">
            <array>
                <value>抽烟</value>
                <value>喝酒</value>
                <value>烫头</value>
            </array>
        </property>
    </bean>

    <!-- 为集合类型属性赋值 -->
    <bean id="clazz2" class="com.fredo.iocxml.di.Clazz">
        <property name="clazzId" value="2222"/>
        <property name="clazzName" value="Javaee0222"/>
        <property name="students">
            <list>
                <ref bean="stu"/>
                <ref bean="stu2"/>
            </list>
        </property>
    </bean>

    <!-- bean的生命周期测试 -->
    <bean id="userLife" class="com.fredo.iocxml.life.UserLife"
          scope="singleton"
          init-method="initMethod" destroy-method="destroyMethod">
        <!-- 作用域是prototype，销毁时并不调用destroyMethod方法 -->
        <property name="id" value="1"/>
        <property name="age" value="20"/>
        <property name="username" value="fredo"/>
        <property name="password" value="密码"/>
    </bean>
    <!-- 以上配置只会执行，第1、2、4、6步
        第3、5步需要配置后置处理器
        后置处理器的配置是全局生效的，并不单指一个bean，因此需单独配置
     -->
    <!-- bean的后置处理器要放入IOC容器才能生效 -->
    <bean id="myBeanProcessor" class="com.fredo.iocxml.life.MyBeanProcessor"/>
</beans>