AOP
    Aspect Oriented Programming
    一种设计思想，是软件设计领域中的面向切面编程，它是面向对象编程的一种补充和完善

    实现原理：通过预编译方式和运行期动态代理方式实现

    达到效果：在不修改源代码的情况下，给程序动态统一添加额外功能

    使用目的：对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率

    相关术语：
    1、横切点：就是要增强功能的位置，
            分散在每个各个模块中解决同一样的问题，如用户验证、日志管理、事务处理、数据缓存都属于横切关注点
    2、通知（增强）：就是要增强的功能
            1 前置通知：在被代理的目标方法前执行
            2 返回通知：在被代理的目标方法成功结束后执行（寿终正寝）
            3 异常通知：在被代理的目标方法异常结束后执行（死于非命）
            4 后置通知：在被代理的目标方法最终结束后执行（盖棺定论）
            5 环绕通知：使用try...catch...finally结构围绕整个被代理的目标方法，包括上面四种通知对应的所有位置
    3、切面：封装通知方法的类

    4、目标：被代理的目标对象

    5、代理：向目标对象应用通知之后创建的代理对象

    6、连接点：就是spring允许你使用通知的地方
            把方法排成一排，每一个横切位置看成x轴方向，把方法从上到下执行的顺序看成y轴，x轴和y轴的交叉点就是连接点。

    7、切入点：定位连接点的方式
            每个类的方法中都包含多个连接点，所以连接点是类中客观存在的事物（从逻辑上来说）。
            如果把连接点看作数据库中的记录，那么切入点就是查询记录的 SQL 语句。
            Spring 的 AOP 技术可以通过切入点定位到特定的连接点。通俗说，要实际去增强的方法
            切点通过 org.springframework.aop.Pointcut 接口进行描述，它使用类和方法作为连接点的查询条件












